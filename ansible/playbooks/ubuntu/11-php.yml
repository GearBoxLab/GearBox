---
- name: Install PHP and extensions
  hosts: localhost
  become: true
  vars:
    support_php_versions: [ "5.6", "7.0", "7.1", "7.2", "7.3", "7.4", "8.0", "8.1", "8.2" ]
  tasks:
    - name: Add phpvm command to switch PHP versions
      copy:
        content: '{{ script }}'
        dest: /usr/local/bin/phpvm
        mode: '+x'
      vars:
        script: |
          #!/bin/bash
          
          case $1 in
            use)
              if [ "$2" != "" ]
              then
                sudo update-alternatives --set php /usr/bin/php$2
                sudo update-alternatives --set phar /usr/bin/phar$2
                sudo update-alternatives --set phar.phar /usr/bin/phar.phar$2
                sudo update-alternatives --set phpize /usr/bin/phpize$2
                sudo update-alternatives --set php-config /usr/bin/php-config$2
              fi
          
              exit;
            ;;
          esac
          
          echo Usage: phpvm use \<php-version\>
          echo
          echo 'Supported versions: {{ ', '.join(php.versions) }}'
          echo
          echo 'Example1: phpvm use 5.6'
          echo '          then run "php --version" will get "PHP 5.6.x"'
          echo 'Example2: phpvm use 7.4'
          echo '          then run "php --version" will get "PHP 7.4.x"'

    - name: Install PHP and extensions
      include_tasks: 'tasks/php.yml'
      loop: '{{ php.versions }}'
      vars:
        php_version: '{{ item }}'
      when: 'php_version in support_php_versions'

    - name: Set PHP {{ php.default_version }} as default PHP version
      command: '/usr/local/bin/phpvm use {{ php.default_version }}'
      when: 'php.default_version in php.versions and php.default_version in support_php_versions'
      changed_when: false

- name: Install the PHP drivers for Microsoft SQL Server
  hosts: localhost
  become: true
  vars:
    php_sqlsrv_extensions:
      '7.0': { name: 'sqlsrv-5.3.0',  dir: '/usr/lib/php/20151012' }
      '7.1': { name: 'sqlsrv-5.6.1',  dir: '/usr/lib/php/20160303' }
      '7.2': { name: 'sqlsrv-5.8.1',  dir: '/usr/lib/php/20170718' }
      '7.3': { name: 'sqlsrv-5.9.0',  dir: '/usr/lib/php/20180731' }
      '7.4': { name: 'sqlsrv-5.10.1', dir: '/usr/lib/php/20190902' }
      '8.0': { name: 'sqlsrv-5.11.1', dir: '/usr/lib/php/20200930' }
      '8.1': { name: 'sqlsrv',        dir: '/usr/lib/php/20210902' }
      '8.2': { name: 'sqlsrv',        dir: '/usr/lib/php/20220829' }
  tasks:
    - name: 'Install Microsoft ODBC drivers and unixODBC development headers'
      apt:
        name: '{{ packages }}'
        state: latest
      vars:
        packages:
          - msodbcsql17
          - msodbcsql18
          - unixodbc-dev
      environment:
        ACCEPT_EULA: 'y'

    - name: 'Register the package "sqlsrv" as not installed'
      command: pecl uninstall -r sqlsrv
      register: pecl_uninstall_response
      changed_when: '"not installed" not in pecl_uninstall_response.stdout'
    - name: 'Register the package "pdo_sqlsrv" as not installed'
      command: pecl uninstall -r pdo_sqlsrv
      register: pecl_uninstall_response
      changed_when: '"not installed" not in pecl_uninstall_response.stdout'

    - name: Install the PHP drivers for Microsoft SQL Server
      include_tasks: 'tasks/php-pdo-sqlsrv.yml'
      loop: '{{ php.versions }}'
      vars:
        php_version: '{{ item }}'
        php_sqlsrv_extension_name: '{{ php_sqlsrv_extensions[php_version]["name"]|default("") }}'
        php_sqlsrv_extension_dir: '{{ php_sqlsrv_extensions[php_version]["dir"]|default("") }}'
      when: 'php_sqlsrv_extensions[php_version] is defined'

- name: Install PHP Composer
  hosts: localhost
  become: true
  tasks:
    - name: 'Check composer is installed'
      stat:
        path: '/usr/local/bin/composer'
      register: composer_stat_result

    - name: Install Composer
      shell: |
        EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
        
        if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
        then
          >&2 echo 'ERROR: Invalid installer checksum'
          rm composer-setup.php
          exit 1
        fi
        
        php composer-setup.php --quiet
        rm composer-setup.php
        
        mv composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer
      when: not composer_stat_result.stat.exists

    - name: 'Check composer22 is installed'
      stat:
        path: '/usr/local/bin/composer22'
      register: composer22_stat_result

    - name: Install Composer 2.2.x for PHP < 7.2.5
      get_url:
        url: https://getcomposer.org/download/latest-2.2.x/composer.phar
        dest: /usr/local/bin/composer22
        mode: '+x'
      when: not composer22_stat_result.stat.exists

- name: Install Blackfire Agent and PHP extensions
  hosts: localhost
  become: true
  tasks:
    - name: Install Blackfire Agent
      apt:
        name: blackfire-agent
        state: latest
      when: 'blackfire.install == true'

    - name: Enable blackfire-agent service
      ansible.builtin.service:
        name: 'blackfire-agent'
        enabled: yes
        state: started
      when: 'wsl == false and blackfire.enable_service == true'

    - name: Add Blackfire Agent configuration
      template:
        src: 'templates/blackfire/agent.j2'
        dest: /etc/blackfire/agent
        owner: root
        group: root
        mode: '0644'
      when: 'blackfire.install == true'

    - name: Install Blackfire PHP extension
      apt:
        name: blackfire-php
        state: latest
      when: 'blackfire.install == true'
